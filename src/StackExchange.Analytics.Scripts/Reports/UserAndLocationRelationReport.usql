 /*
 * Extracting the input data
 */
@users =
    EXTRACT Source string,
            Id int,
            DisplayName string,
            Reputation int,
            CreationDate DateTime,
            LastAccessDate DateTime,
            Location string,
            AboutMe string,
            Views int,
            UpVotes int,
            DownVotes int,
            Age int,
            AccountId int,
            ProfileImageUrl string,
            WebsiteUrl string
    FROM "/aggregated-data/users.csv"
    USING Extractors.Csv();

@countries =
    EXTRACT Name string,
            Alpha2Code string,
            Alpha3Code string,
            CountryCode string,
            IsoCode string,
            Region string,
            SubRegion string,
            RegionCode string,
            SubRegionCode string
    FROM "/reference-data/geolocation/countries.csv"
    USING Extractors.Csv();

/*
 * Analyse the data
 */
@usersRegionMap =
    SELECT country.Name AS Location,
           (country.Region == ""? "Not/Applicable" : country.Region) AS Region,
           (country.SubRegion == ""? "Not/Applicable" : country.SubRegion) AS SubRegion,
           COUNT( * ) AS TotalCount,
           AVG(Reputation) AS AvgReputation,
           AVG(Views) AS AvgViews,
           AVG(UpVotes) AS AvgUpVotes,
           AVG(DownVotes) AS AvgDownVotes
    FROM @users AS user
         JOIN
             @countries AS country
         ON user.Location == country.Name
    GROUP BY country.Region,
             country.SubRegion,
             country.Name;

@usersLocationRelation =
    SELECT "Not Found" AS Outcome,
           COUNT( * ) AS TotalCount,
           AVG(Reputation) AS AvgReputation,
           AVG(Views) AS AvgViews,
           AVG(UpVotes) AS AvgUpVotes,
           AVG(DownVotes) AS AvgDownVotes
    FROM @users AS user
         LEFT JOIN
             @countries AS country
         ON user.Location == country.Name
    WHERE country.Name == null AND user.Location != ""
    UNION
    SELECT "Not Specified" AS Outcome,
           COUNT( * ) AS TotalCount,
           AVG(Reputation) AS AvgReputation,
           AVG(Views) AS AvgViews,
           AVG(UpVotes) AS AvgUpVotes,
           AVG(DownVotes) AS AvgDownVotes
    FROM @users AS user
         LEFT JOIN
             @countries AS country
         ON user.Location == country.Name
    WHERE user.Location != ""
    UNION
    SELECT "Found" AS Outcome,
           COUNT( * ) AS TotalCount,
           AVG(Reputation) AS AvgReputation,
           AVG(Views) AS AvgViews,
           AVG(UpVotes) AS AvgUpVotes,
           AVG(DownVotes) AS AvgDownVotes
    FROM @users AS user
         JOIN
             @countries AS country
         ON user.Location == country.Name;

/*
 * Output analytics data to the store
 */
OUTPUT @usersLocationRelation
TO "reports/users-location-relation.csv"
ORDER BY TotalCount DESC
USING Outputters.Csv();

OUTPUT @usersRegionMap
TO "reports/users-region-country.csv"
ORDER BY Region,
         SubRegion,
         Location,
         TotalCount DESC
USING Outputters.Csv();